name: CI
on: [push]
jobs:
  fwends-frontend:
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.build.outputs.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push
        id: build
        uses: ./.github/actions/docker-build-push
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          context: fwends-frontend
          image: ${{ github.repository }}/fwends-frontend
          cache-tag: ${{ github.ref_name }}-latest
          output-tag: ${{ github.sha }}
  fwends-nginx:
    runs-on: ubuntu-latest
    needs: fwends-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and push
        uses: ./.github/actions/docker-build-push
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          context: fwends-nginx
          image: ${{ github.repository }}/fwends-nginx
          cache-tag: ${{ github.ref_name }}-latest
          output-tag: ${{ github.sha }}
          build-args: |
            FRONTEND=${{needs.fwends-frontend.outputs.ref}}
  fwends-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: fwends-backend
          push: true
          tags: |
            ghcr.io/${{github.repository}}/fwends-backend:${{ github.sha }}
            ghcr.io/${{github.repository}}/fwends-backend:${{ github.ref_name }}-latest
          cache-from: type=registry,ref=ghcr.io/${{github.repository}}/fwends-backend:${{ github.ref_name }}-latest
          cache-to: type=inline
  fwends-postgres:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: fwends-postgres
          push: true
          tags: |
            ghcr.io/${{github.repository}}/fwends-postgres:${{ github.sha }}
            ghcr.io/${{github.repository}}/fwends-postgres:${{ github.ref_name }}-latest
          cache-from: type=registry,ref=ghcr.io/${{github.repository}}/fwends-postgres:${{ github.ref_name }}-latest
          cache-to: type=inline
  fwends-redis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: fwends-redis
          push: true
          tags: |
            ghcr.io/${{github.repository}}/fwends-redis:${{ github.sha }}
            ghcr.io/${{github.repository}}/fwends-redis:${{ github.ref_name }}-latest
          cache-from: type=registry,ref=ghcr.io/${{github.repository}}/fwends-redis:${{ github.ref_name }}-latest
          cache-to: type=inline
  fwends-test:
    runs-on: ubuntu-latest
    needs: [fwends-backend,fwends-frontend,fwends-nginx,fwends-redis,fwends-postgres]
    env:
      SKAFFOLD_DEFAULT_REPO: ghcr.io/${{ github.repository }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install skaffold
        run: |
          curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 && \
          sudo install skaffold /usr/local/bin/
      - name: Install pipenv
        run: |
          pipx install pipenv
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
          cache: 'pipenv'
          cache-dependency-path: fwends-test/Pipfile.lock
      - name: Install python dependencies
        working-directory: ./fwends-test
        run: |
          pipenv install
      - name: Start minikube cluster
        run: |
          minikube start
      - name: Run skaffold pipeline
        run: |
          skaffold run --port-forward --tail | tee ./skaffold-output.txt &
          echo "SKAFFOLD_PID=$!" >> $GITHUB_ENV
      - name: Create kubernetes api proxy
        run: |
          kubectl proxy --port=8081 &
          echo "KUBE_PROXY_PID=$!" >> $GITHUB_ENV
      - name: Run Integration tests
        working-directory: ./fwends-test
        run: |
          pipenv run pytest \
            --health-check-enable \
            --health-check-timeout 120 \
            --failure-test-enable
      - name: Terminate kubernetes api proxy
        if: always()
        run: |
          kill -SIGTERM $KUBE_PROXY_PID
      - name: Terminate skaffold process
        if: always()
        run: |
          kill -SIGTERM $SKAFFOLD_PID
          while kill -0 $SKAFFOLD_PID; do
            sleep 1
          done
      - name: Upload skaffold output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: skaffold-output
          path: ./skaffold-output.txt
      - name: Delete skaffold pipeline
        if: always()
        run: |
          skaffold delete
      - name: Delete minikube cluster
        if: always()
        run: |
          minikube delete
